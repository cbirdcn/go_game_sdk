// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SdkClient is the client API for Sdk service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SdkClient interface {
	CheckEnter(ctx context.Context, in *CheckEnterRequest, opts ...grpc.CallOption) (*CheckEnterReply, error)
}

type sdkClient struct {
	cc grpc.ClientConnInterface
}

func NewSdkClient(cc grpc.ClientConnInterface) SdkClient {
	return &sdkClient{cc}
}

func (c *sdkClient) CheckEnter(ctx context.Context, in *CheckEnterRequest, opts ...grpc.CallOption) (*CheckEnterReply, error) {
	out := new(CheckEnterReply)
	err := c.cc.Invoke(ctx, "/sdk.v1.Sdk/CheckEnter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SdkServer is the server API for Sdk service.
// All implementations must embed UnimplementedSdkServer
// for forward compatibility
type SdkServer interface {
	CheckEnter(context.Context, *CheckEnterRequest) (*CheckEnterReply, error)
	mustEmbedUnimplementedSdkServer()
}

// UnimplementedSdkServer must be embedded to have forward compatible implementations.
type UnimplementedSdkServer struct {
}

func (UnimplementedSdkServer) CheckEnter(context.Context, *CheckEnterRequest) (*CheckEnterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckEnter not implemented")
}
func (UnimplementedSdkServer) mustEmbedUnimplementedSdkServer() {}

// UnsafeSdkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SdkServer will
// result in compilation errors.
type UnsafeSdkServer interface {
	mustEmbedUnimplementedSdkServer()
}

func RegisterSdkServer(s grpc.ServiceRegistrar, srv SdkServer) {
	s.RegisterService(&Sdk_ServiceDesc, srv)
}

func _Sdk_CheckEnter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckEnterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdkServer).CheckEnter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.v1.Sdk/CheckEnter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdkServer).CheckEnter(ctx, req.(*CheckEnterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sdk_ServiceDesc is the grpc.ServiceDesc for Sdk service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sdk_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sdk.v1.Sdk",
	HandlerType: (*SdkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckEnter",
			Handler:    _Sdk_CheckEnter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/sdk/v1/sdk.proto",
}
